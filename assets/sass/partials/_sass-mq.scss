// To enable support for browsers that do not support @media queries,
// (IE <= 8, Firefox <= 3, Opera <= 9) set $mq-responsive to false
// Create a separate stylesheet served exclusively to these browsers,
// meaning @media queries will be rasterized, relying on the cascade itself
$mq-responsive: true;

// Name your breakpoints in a way that creates a ubiquitous language
// across team members. It will improve communication between
// stakeholders, designers, developers, and testers.
$mq-breakpoints: (
    mobile:  320px,
    tablet:  600px,
    desktop: 900px, //desktop: 980px,
    wide:    1300px,
    max:     1600px,

    // Tweakpoints
    desktopAd: 810px,
    mobileLandscape: 480px
);

// Define the breakpoint from the $mq-breakpoints list that should
// be used as the target width when outputting a static stylesheet
// (i.e. when $mq-responsive is set to 'false').
$mq-static-breakpoint: desktop;

// If you want to display the currently active breakpoint in the top
// right corner of your site during development, add the breakpoints
// to this list, ordered by width, e.g. (mobile, tablet, desktop).
$mq-show-breakpoints: (mobile, mobileLandscape, tablet, desktop, wide);

@import "mq";

@function get-vw($target) {
  $vw-context: (map-get($mq-breakpoints, max) * .01);
  @return (($target/$vw-context) * 1vw);
}


@mixin mq-scale-between-devices($var-sizes, $device-sm, $device-lg) {
  $breakpoint-sm: mq-get-breakpoint-width($device-sm);
  $breakpoint-lg: mq-get-breakpoint-width($device-lg);
  @each $var-name, $size in $var-sizes {
    #{$var-name}: ($breakpoint-sm / $breakpoint-lg) * $size;
    @include mq($from: $device-sm) {
      #{$var-name}: ($size / $breakpoint-lg) * 100vw;
    }
    @include mq($from: $device-lg) {
      #{$var-name}: $size;
    }
  }
}